#!/bin/bash

cd ${0%/*} || exit 1                        # Run from this directory
. $WM_PROJECT_DIR/bin/tools/RunFunctions    # Tutorial run functions

# This script prepares and runs all the participants in one terminal,
# forwarding the solvers' output to log files.
# Alternatively, you may execute the scripts "runSolid" and "runFluid"
# in separate terminals.

# Run this script with "-parallel" for parallel simulations

# The script "Allclean" cleans-up the result and log files.
# Set up the run parameters:

# 1 for true, 0 for false
parallel=0
if [ "$1" = "-parallel" ]; then
    parallel=1
fi

# =============== Participant 1: Fluid ===========================
Participant1="Fluid"

  # Prepare
  echo "Preparing the ${Participant1} participant..."

  cd ${Participant1}

  echo "  Restoring 0/ from initBCs/..."
  rm -rfv 0
  cp -r initBCs 0

  echo "  Preparing the mesh..."
  blockMesh > ../log.${Participant1}.blockMesh 2>&1
  checkMesh > ../log.${Participant1}.checkMeshg 2>&1

  # get application information
  Solver1=$(getApplication)    # solver
  echo "  ${Participant1} Solver: ${Solver1}."

  # Run and get the process id
  if [ $parallel -eq 1 ]; then

    echo "  Decomposing the case..."
    decomposePar -force > ../log.${Participant1}.decomposePar 2>&1
    nproc=$(getNumberOfProcessors)

    echo "  Starting the ${Participant1} participant in parallel..."
    mpirun --use-hwthread-cpus -np ${nproc} ${Solver1} -parallel > ../log.${Participant1} 2>&1 &

  else
    echo "  Starting the ${Participant1} participant in serial..."
    ${Solver1} > ../log.${Participant1} 2>&1 &
  fi

  PIDParticipant1=$!
  echo "  ${Participant1} PID: ${PIDParticipant1}"

  cd ..

# =============== Participant 2: Solid ===========================
Participant2="Solid"
Solver2="predyn.py"

  # Run
  echo "  Starting the ${Participant2} participant..."
  cd ${Participant2}

  python3 ${Solver2} > ../log.${Participant2}  2>&1 &
  PIDParticipant2=$!
  echo "  ${Participant2} PID: ${PIDParticipant2}"

  cd ..


# =============== Wait for all the participants to finish =======
echo "Waiting for the participants to exit..., PIDs: ${PIDParticipant1}, ${PIDParticipant2}"
echo "(you may run 'tail -f ${Participant1}.log' in another terminal to check the progress)"

echo "To interrupt the simulation, press 'c'. Ctrl+C will only send the processes to the background."
while [[ -e /proc/${PIDParticipant1} || -e /proc/${PIDParticipant2} ]]; do
  read -r -t1 -n1 input
  if [ "$input" = "c" ]; then
    kill ${PIDParticipant1}
    kill ${PIDParticipant2}
    false
  fi
done

if [ $? -ne 0 ] || [ "$(grep -c -E "error:" log.${Participant1})" -ne 0 ] || [ "$(grep -c -E "error:" log.${Participant2})" -ne 0 ]; then
  echo ""
  echo "Something went wrong... See the log files for more."
  # Precaution
  kill ${PIDParticipant1}
  kill ${PIDParticipant2}
else
  echo ""
  echo "The simulation completed! (check for any errors)"
  if [ $parallel -eq 1 ]; then
    echo "Reconstructing fields..."
    reconstructPar -case ${Participant1} > log.${Participant1}.reconstructPar 2>&1 &
  fi

  echo "You may now open '${Participant1}/${Participant1}.foam' in ParaView."
fi
